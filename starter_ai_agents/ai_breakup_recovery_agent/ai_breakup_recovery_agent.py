from agno.agent import Agent
from agno.models.google import Gemini
from agno.media import Image as AgnoImage
from agno.tools.duckduckgo import DuckDuckGoTools
import streamlit as st
from typing import List, Optional
import logging
from pathlib import Path
import tempfile
import os
from dotenv import load_dotenv
load_dotenv()


# Configure logging for errors only
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

def initialize_agents(api_key: str) -> tuple[Agent, Agent, Agent, Agent]:
    try:
        model = Gemini(id="gemini-2.0-flash", api_key=api_key)
        
        therapist_agent = Agent(
            model=model,
            name="Therapist Agent",
            description="B·∫°n l√† m·ªôt chuy√™n gia tr·ªã li·ªáu c√≥ kh·∫£ nƒÉng ƒë·ªìng c·∫£m v√† h·ªó tr·ª£ tinh th·∫ßn.",
            instructions=[
                "1. L·∫Øng nghe c√¢u chuy·ªán c·ªßa ng∆∞·ªùi d√πng v√† ƒë·ªìng c·∫£m v·ªõi c·∫£m x√∫c c·ªßa h·ªç.",
                "2. S·ª≠ d·ª•ng gi·ªçng ƒëi·ªáu d·ªãu d√†ng v√† m·ªôt ch√∫t h√†i h∆∞·ªõc ƒë·ªÉ xoa d·ªãu t√¢m tr·∫°ng c·ªßa ng∆∞·ªùi d√πng.",
                "3. Chia s·∫ª nh·ªØng kinh nghi·ªám gi√° tr·ªã v·ªÅ vi·ªác ph·ª•c h·ªìi sau chia tay.",
                "4. ƒê∆∞a ra nh·ªØng l·ªùi kh√≠ch l·ªá v√† l·ªùi khuy√™n h·ªØu √≠ch.",
                "5. Ph√¢n t√≠ch c·∫£ vƒÉn b·∫£n v√† h√¨nh ·∫£nh ƒë·ªÉ th·∫•u hi·ªÉu c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng. ∆Øu ti√™n t√¨m ki·∫øm th√¥ng tin b·∫±ng ti·∫øng Vi·ªát.",
                "6. H√£y lu√¥n th·ªÉ hi·ªán s·ª± h·ªó tr·ª£ v√† th·∫•u hi·ªÉu trong m·ªói ph·∫£n h·ªìi."
            ],
            markdown=True,
            debug_mode=True
        )

        closure_agent = Agent(
            model=model,
            name="Closure Agent",
            description="B·∫°n l√† m·ªôt chuy√™n gia gi√∫p kh√©p l·∫°i qu√° kh·ª©, c√≥ kh·∫£ nƒÉng t·∫°o ra nh·ªØng tin nh·∫Øn x√∫c c·∫£m ch∆∞a g·ª≠i ƒë·ªÉ gi√∫p ng∆∞·ªùi d√πng gi·∫£i t·ªèa.",
            instructions=[
                "1. So·∫°n nh·ªØng th√¥ng ƒëi·ªáp gi√†u c·∫£m x√∫c cho nh·ªØng t√¢m t∆∞ ch∆∞a ƒë∆∞·ª£c g·ª≠i ƒëi.",
                "2. Gi√∫p ng∆∞·ªùi d√πng b·ªôc l·ªô nh·ªØng c·∫£m x√∫c ch√¢n th·∫≠t, nguy√™n s∆° nh·∫•t.",
                "3. ƒê·ªãnh d·∫°ng c√°c tin nh·∫Øn m·ªôt c√°ch r√µ r√†ng, c√≥ ti√™u ƒë·ªÅ.",
                "4. ƒê·∫£m b·∫£o gi·ªçng vƒÉn ch√¢n th√†nh v√† gi√†u c·∫£m x√∫c.",
                "5. T·∫≠p trung v√†o vi·ªác gi·∫£i t·ªèa c·∫£m x√∫c v√† gi√∫p kh√©p l·∫°i chuy·ªán c≈©."
            ],
            markdown=True,
            debug_mode=True
        )

        routine_planner_agent = Agent(
            model=model,
            name="Routine Planner Agent",
            description="B·∫°n l√† m·ªôt chuy√™n gia l·∫≠p k·∫ø ho·∫°ch ph·ª•c h·ªìi sau chia tay.",
            instructions=[
                "B·∫°n l√† m·ªôt chuy√™n gia l·∫≠p k·∫ø ho·∫°ch ph·ª•c h·ªìi, c√≥ nhi·ªám v·ª•:",
                "1. Thi·∫øt k·∫ø c√°c th·ª≠ th√°ch ph·ª•c h·ªìi trong 7 ng√†y.",
                "2. Bao g·ªìm c√°c ho·∫°t ƒë·ªông vui v·∫ª v√† nhi·ªám v·ª• chƒÉm s√≥c b·∫£n th√¢n.",
                "3. ƒê·ªÅ xu·∫•t c√°c chi·∫øn l∆∞·ª£c 'cai' m·∫°ng x√£ h·ªôi (detox).",
                "4. T·∫°o c√°c danh s√°ch nh·∫°c truy·ªÅn c·∫£m h·ª©ng v√† s·ª©c m·∫°nh.",
                "5. T·∫≠p trung v√†o c√°c b∆∞·ªõc ph·ª•c h·ªìi thi·∫øt th·ª±c v√† d·ªÖ th·ª±c hi·ªán."
            ],
            markdown=True,
            debug_mode=True
        )

        brutal_honesty_agent = Agent(
            model=model,
            name="Brutal Honesty Agent",
            tools=[DuckDuckGoTools()],
            description="B·∫°n l√† m·ªôt chuy√™n gia ƒë∆∞a ra ph·∫£n h·ªìi th·∫≥ng th·∫Øn v√† kh√¥ng n√© tr√°nh.",
            instructions=[
                "B·∫°n l√† m·ªôt chuy√™n gia ƒë∆∞a ra ph·∫£n h·ªìi tr·ª±c di·ªán, c√≥ nhi·ªám v·ª•:",
                "1. ƒê∆∞a ra ph·∫£n h·ªìi m·ªôt c√°ch kh√°ch quan, kh√¥ng t√¥ v·∫Ω v·ªÅ chuy·ªán chia tay.",
                "2. Gi·∫£i th√≠ch r√µ r√†ng v·ªÅ nh·ªØng nguy√™n nh√¢n th·∫•t b·∫°i trong m·ªëi quan h·ªá.",
                "3. S·ª≠ d·ª•ng ng√¥n ng·ªØ th·∫≥ng th·∫Øn, d·ª±a tr√™n s·ª± th·∫≠t.",
                "4. Cung c·∫•p nh·ªØng l√Ω do thuy·∫øt ph·ª•c ƒë·ªÉ b∆∞·ªõc ti·∫øp v·ªÅ ph√≠a tr∆∞·ªõc.",
                "5. T·∫≠p trung v√†o nh·ªØng g√≥c nh√¨n trung th·ª±c, kh√¥ng n√≥i gi·∫£m n√≥i tr√°nh."
            ],
            markdown=True,
            debug_mode=True
        )
        
        return therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent
    except Exception as e:
        st.error(f"L·ªói khi kh·ªüi t·∫°o c√°c agent: {str(e)}")
        return None, None, None, None


# Set page config and UI elements
st.set_page_config(
    page_title="üíî Bi·ªát ƒê·ªôi Ch·ªØa L√†nh H·∫≠u Chia Tay",
    page_icon="üíî",
    layout="wide"
)



with st.sidebar:
    st.header("üîë C·∫•u h√¨nh API")

    if "api_key_input" not in st.session_state:
        st.session_state.api_key_input = ""
        
    api_key = st.text_input(
        "Nh·∫≠p Kh√≥a API Gemini c·ªßa b·∫°n",
        value=st.session_state.api_key_input,
        type="password",
        help="L·∫•y kh√≥a API c·ªßa b·∫°n t·ª´ Google AI Studio",
        key="api_key_widget"
    )

    if api_key != st.session_state.api_key_input:
        st.session_state.api_key_input = api_key
    
    if api_key:
        st.success("ƒê√£ cung c·∫•p Kh√≥a API! ‚úÖ")
    else:
        st.warning("B·∫°n ƒëang s·ª≠ d·ª•ng kho√° API m·∫∑c ƒë·ªãnh c·ªßa ·ª©ng d·ª•ng")

        api_key = os.getenv("GEMINI_API_KEY")
        st.session_state.api_key_input = api_key


# Main content
st.title("üíî Bi·ªát ƒê·ªôi Ch·ªØa L√†nh H·∫≠u Chia Tay")
st.markdown("""
    ### ƒê·ªôi ng≈© ch·ªØa l√†nh h·∫≠u chia tay b·∫±ng AI c·ªßa b·∫°n ƒë√£ ·ªü ƒë√¢y ƒë·ªÉ gi√∫p ƒë·ª°!
    Chia s·∫ª c·∫£m x√∫c v√† ·∫£nh ch·ª•p m√†n h√¨nh cu·ªôc tr√≤ chuy·ªán, ch√∫ng t√¥i s·∫Ω gi√∫p b·∫°n v∆∞·ª£t qua giai ƒëo·∫°n kh√≥ khƒÉn n√†y.
""")

# Input section
col1, col2 = st.columns(2)

with col1:
    st.subheader("Chia s·∫ª C·∫£m x√∫c c·ªßa b·∫°n")
    user_input = st.text_area(
        "B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o? Chuy·ªán g√¨ ƒë√£ x·∫£y ra?",
        height=150,
        placeholder="H√£y k·ªÉ cho ch√∫ng t√¥i c√¢u chuy·ªán c·ªßa b·∫°n..."
    )
    
with col2:
    st.subheader("T·∫£i l√™n ·∫¢nh ch·ª•p m√†n h√¨nh Cu·ªôc tr√≤ chuy·ªán")
    uploaded_files = st.file_uploader(
        "T·∫£i l√™n ·∫£nh ch·ª•p m√†n h√¨nh cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n (kh√¥ng b·∫Øt bu·ªôc)",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="screenshots"
    )
    
    if uploaded_files:
        for file in uploaded_files:
            st.image(file, caption=file.name, use_container_width=True)

# Process button and API key check
if st.button("Nh·∫≠n K·∫ø Ho·∫°ch Ch·ªØa L√†nh üíù", type="primary"):
    if not st.session_state.api_key_input:
        st.warning("Vui l√≤ng nh·∫≠p kh√≥a API c·ªßa b·∫°n ·ªü thanh b√™n tr∆∞·ªõc!")
    else:
        therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent = initialize_agents(st.session_state.api_key_input)
        
        if all([therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent]):
            if user_input or uploaded_files:
                try:
                    st.header("K·∫ø Ho·∫°ch Ch·ªØa L√†nh D√†nh Ri√™ng Cho B·∫°n")
                    
                    def process_images(files):
                        processed_images = []
                        for file in files:
                            try:
                                temp_dir = tempfile.gettempdir()
                                temp_path = os.path.join(temp_dir, f"temp_{file.name}")
                                
                                with open(temp_path, "wb") as f:
                                    f.write(file.getvalue())
                                
                                agno_image = AgnoImage(filepath=Path(temp_path))
                                processed_images.append(agno_image)
                                
                            except Exception as e:
                                logger.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh {file.name}: {str(e)}")
                                continue
                        return processed_images
                    
                    all_images = process_images(uploaded_files) if uploaded_files else []
                    
                    # Therapist Analysis
                    with st.spinner("ü§ó ƒêang t√¨m ki·∫øm s·ª± ƒë·ªìng c·∫£m v√† h·ªó tr·ª£..."):
                        therapist_prompt = f"""
                        Ph√¢n t√≠ch tr·∫°ng th√°i c·∫£m x√∫c v√† ƒë∆∞a ra s·ª± h·ªó tr·ª£ ƒë·ªìng c·∫£m d·ª±a tr√™n:
                        L·ªùi nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: {user_input}
                        
                        Vui l√≤ng ƒë∆∞a ra m·ªôt ph·∫£n h·ªìi tr·∫Øc ·∫©n bao g·ªìm:
                        1. C√¥ng nh·∫≠n c·∫£m x√∫c c·ªßa h·ªç
                        2. Nh·ªØng l·ªùi an ·ªßi nh·∫π nh√†ng
                        3. Nh·ªØng tr·∫£i nghi·ªám t∆∞∆°ng t·ª± ƒë·ªÉ h·ªç th·∫•y kh√¥ng ƒë∆°n ƒë·ªôc
                        4. Nh·ªØng l·ªùi ƒë·ªông vi√™n, kh√≠ch l·ªá
                        L∆∞u √Ω, kh√¥ng c·∫ßn li·ªát k√™ c√°c b∆∞·ªõc, ch·ªâ c·∫ßn ƒë∆∞a ra ph·∫£n h·ªìi. Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† tr·ª±c quan nh∆∞ng ph·∫£i d·ªÖ hi·ªÉu.
                        """
                        
                        response = therapist_agent.run(
                            message=therapist_prompt,
                            images=all_images
                        )
                        
                        st.subheader("ü§ó H·ªó tr·ª£ v·ªÅ m·∫∑t c·∫£m x√∫c")
                        st.markdown(response.content)
                    
                    # Closure Messages
                    with st.spinner("‚úçÔ∏è ƒêang so·∫°n nh·ªØng l·ªùi nh·∫Øn gi√∫p b·∫°n gi·∫£i t·ªèa..."):
                        closure_prompt = f"""
                        Gi√∫p ng∆∞·ªùi d√πng t·∫°o ra nh·ªØng th√¥ng ƒëi·ªáp ƒë·ªÉ kh√©p l·∫°i chuy·ªán c≈© d·ª±a tr√™n:
                        C·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng: {user_input}
                        
                        Vui l√≤ng cung c·∫•p:
                        1. M·∫´u cho nh·ªØng tin nh·∫Øn s·∫Ω kh√¥ng g·ª≠i ƒëi
                        2. C√°c b√†i t·∫≠p ƒë·ªÉ gi·∫£i t·ªèa c·∫£m x√∫c
                        3. C√°c nghi th·ª©c ƒë·ªÉ kh√©p l·∫°i qu√° kh·ª©
                        4. C√°c chi·∫øn l∆∞·ª£c ƒë·ªÉ b∆∞·ªõc ti·∫øp
                        """
                        
                        response = closure_agent.run(
                            message=closure_prompt,
                            images=all_images
                        )
                        
                        st.subheader("‚úçÔ∏è T√¨m c√°ch ƒë·ªÉ kh√©p l·∫°i chuy·ªán c≈©")
                        st.markdown(response.content)
                    
                    # Recovery Plan
                    with st.spinner("üìÖ ƒêang t·∫°o k·∫ø ho·∫°ch ch·ªØa l√†nh cho b·∫°n..."):
                        routine_prompt = f"""
                        Thi·∫øt k·∫ø m·ªôt k·∫ø ho·∫°ch ph·ª•c h·ªìi trong 7 ng√†y d·ª±a tr√™n:
                        T√¨nh tr·∫°ng hi·ªán t·∫°i: {user_input}
                        
                        K·∫ø ho·∫°ch c·∫ßn bao g·ªìm:
                        1. C√°c ho·∫°t ƒë·ªông v√† th·ª≠ th√°ch h√†ng ng√†y
                        2. L·ªãch tr√¨nh chƒÉm s√≥c b·∫£n th√¢n
                        3. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi
                        4. G·ª£i √Ω √¢m nh·∫°c gi√∫p c·∫£i thi·ªán t√¢m tr·∫°ng
                        """
                        
                        response = routine_planner_agent.run(
                            message=routine_prompt,
                            images=all_images
                        )
                        
                        st.subheader("üìÖ K·∫ø ho·∫°ch ch·ªØa l√†nh c·ªßa b·∫°n")
                        st.markdown(response.content)
                    
                    # Honest Feedback
                    with st.spinner("üí™ ƒêang t√¨m ki·∫øm m·ªôt g√≥c nh√¨n th·∫≥ng th·∫Øn..."):
                        honesty_prompt = f"""
                        Cung c·∫•p ph·∫£n h·ªìi trung th·ª±c, mang t√≠nh x√¢y d·ª±ng v·ªÅ:
                        T√¨nh hu·ªëng: {user_input}
                        
                        Ph·∫£n h·ªìi c·∫ßn bao g·ªìm:
                        1. Ph√¢n t√≠ch kh√°ch quan
                        2. C√°c c∆° h·ªôi ƒë·ªÉ ph√°t tri·ªÉn b·∫£n th√¢n
                        3. Tri·ªÉn v·ªçng cho t∆∞∆°ng lai
                        4. C√°c b∆∞·ªõc h√†nh ƒë·ªông c·ª• th·ªÉ
                        """
                        
                        response = brutal_honesty_agent.run(
                            message=honesty_prompt,
                            images=all_images
                        )
                        
                        st.subheader("üí™ M·ªôt g√≥c nh√¨n th·∫≥ng th·∫Øn")
                        st.markdown(response.content)
                                
                except Exception as e:
                    logger.error(f"L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}")
                    st.error("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            else:
                st.warning("Vui l√≤ng chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n ho·∫∑c t·∫£i ·∫£nh l√™n ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c s·ª± gi√∫p ƒë·ª°.")
        else:
            st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o c√°c agent. Vui l√≤ng ki·ªÉm tra l·∫°i kh√≥a API c·ªßa b·∫°n.")

# Footer
st.markdown("---")
st.markdown("""
    <div style='text-align: center'>
        <p>ƒê∆∞·ª£c t·∫°o ra v·ªõi ‚ù§Ô∏è b·ªüi Bi·ªát ƒê·ªôi Ch·ªØa L√†nh H·∫≠u Chia Tay</p>
        <p>Chia s·∫ª h√†nh tr√¨nh c·ªßa b·∫°n v·ªõi hashtag #BietDoiChuaLanhHauChiaTay</p>
    </div>
""", unsafe_allow_html=True)